import{ax as d,al as o,z as n,A as c,B as a,R as t,aL as p,O as u}from"./chunks/framework.CiWjUW6V.js";const v=JSON.parse('{"title":"内核接口开发","description":"了解如何适配 ShiroSU 的内核接口","frontmatter":{"layout":"doc","icon":"box","title":"内核接口开发","description":"了解如何适配 ShiroSU 的内核接口","outline":"deep","footer":true,"breadcrumbs":[{"title":"OOM-WG","link":"/ssu"},{"title":"dev","link":""},{"title":"module","link":"/ssu/dev/module"},{"title":"内核接口开发","link":"/ssu/dev/module/kernel"}]},"headers":[],"relativePath":"ssu/dev/module/kernel.md","filePath":"ssu/dev/module/kernel.md","lastUpdated":1761491518000}'),_={name:"ssu/dev/module/kernel.md"};function m(b,e,h,S,k,N){const s=o("ArticleMetadata"),l=o("NolebasePageProperties"),r=o("NolebaseGitContributors"),i=o("NolebaseGitChangelog");return c(),n("div",null,[e[0]||(e[0]=a("h1",{id:"内核接口开发",tabindex:"-1"},[a("strong",null,"内核接口开发"),u(),a("a",{class:"header-anchor",href:"#内核接口开发","aria-label":"Permalink to “内核接口开发”"},"​")],-1)),t(s),t(l),e[1]||(e[1]=p('<div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>ShiroSU 的原生 root 还在开发中，具体内容随时可能变动！</p></div><p>一些模块会对获取已授权 root 的软件列表或需要隐藏 root 的软件列表有所需求， 目前 ShiroSU 内核会使用如下内容</p><h2 id="接口文件" tabindex="-1">接口文件 <a class="header-anchor" href="#接口文件" aria-label="Permalink to “接口文件”">​</a></h2><p>ShiroSU 使用 <code>/data/adb/ssu/._settings</code> 作为内核设置目录，通常包含以下文件:</p><ul><li><code>._su_list</code>: 授权使用超级用户权限的列表</li><li><code>._bypass_list</code>: 绕过 SELinux 限制的列表</li><li><code>._hide_list</code>: 需要隐藏 root 使用痕迹的列表</li></ul><p><mark>以上文件均采用 <code>二进制 UID</code>(<code>32</code> 位整数) + <code>\\0</code> + <code>软件包名</code> 格式存储，多个值之间以 <code>\\n</code> 间隔</mark></p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>以上文件均为只读，任何模块/软件都不应该修改 ShiroSU 的内核配置文件，<strong>仅 ShiroSU 管理器</strong>有修改权限！</p><p>其他模块/软件修改理应无效，ShiroSU 会在后续更新中逐步添加对内核配置文件写入的限制</p></div>',7)),t(r),t(i)])}const P=d(_,[["render",m]]);export{v as __pageData,P as default};
