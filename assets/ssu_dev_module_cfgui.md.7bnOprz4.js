import{ax as f,al as i,z as g,A as c,B as e,R as a,aL as u,O as s,J as t}from"./chunks/framework.CiWjUW6V.js";const N=JSON.parse('{"title":"ConfigUI 模块开发","description":"了解如何开发具有配置界面的 ShiroSU 模块","frontmatter":{"layout":"doc","icon":"layout-dashboard","title":"ConfigUI 模块开发","description":"了解如何开发具有配置界面的 ShiroSU 模块","outline":"deep","footer":true,"breadcrumbs":[{"title":"OOM-WG","link":"/ssu"},{"title":"dev","link":""},{"title":"module","link":"/ssu/dev/module"},{"title":"ConfigUI 模块开发","link":"/ssu/dev/module/cfgui"}]},"headers":[],"relativePath":"ssu/dev/module/cfgui.md","filePath":"ssu/dev/module/cfgui.md","lastUpdated":1761491518000}'),b={name:"ssu/dev/module/cfgui.md"},m={class:"footnotes"},h={class:"footnotes-list"},k={id:"fn1",class:"footnote-item"},C={id:"fn2",class:"footnote-item"},I={id:"fn3",class:"footnote-item"};function U(V,n,v,F,P,W){const l=i("ArticleMetadata"),r=i("NolebasePageProperties"),p=i("NolebaseGitContributors"),d=i("NolebaseGitChangelog"),o=i("VPNolebaseInlineLinkPreview");return c(),g("div",null,[n[18]||(n[18]=e("h1",{id:"configui-模块开发",tabindex:"-1"},[e("strong",null,"ConfigUI 模块开发"),s(),e("a",{class:"header-anchor",href:"#configui-模块开发","aria-label":"Permalink to “ConfigUI 模块开发”"},"​")],-1)),a(l),a(r),n[19]||(n[19]=u(`<p>ConfigUI 是 ShiroSU 特有的一种功能，旨在通过 FVV <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 的 FWW <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> 低学习成本地快速生成 CU NGA 风格 <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> 的模块配置界面</p><p>使用 ConfigUI 要求模块的<strong>配置文件必须以 FVV 格式 编写</strong>，除非是能让 FVV 解析的简单赋值格式</p><p>ConfigUI 的 配置文件、多语言文件、UI 文件 也必须以 FVV 格式 编写，因此需要了解 FVV 格式 才能使用 ConfigUI</p><h2 id="模块目录结构" tabindex="-1">模块目录结构 <a class="header-anchor" href="#模块目录结构" aria-label="Permalink to “模块目录结构”">​</a></h2><p>模块目录应遵循以下结构:</p><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes kanagawa-lotus kanagawa-wave" style="--shiki-light:#545464;--shiki-dark:#DCD7BA;--shiki-light-bg:#F2ECBC;--shiki-dark-bg:#1F1F28;" tabindex="0" dir="ltr"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── module.prop</span></span>
<span class="line"><span>└── cfgui</span></span>
<span class="line"><span>  ├── config.fvv</span></span>
<span class="line"><span>  ├── ui</span></span>
<span class="line"><span>  │ └── FWW UI 配置文件...</span></span>
<span class="line"><span>  ├── lang (可选)</span></span>
<span class="line"><span>  │ └── FVV 多语言 配置文件...</span></span>
<span class="line"><span>  └── 其他资源...</span></span></code></pre></div><ul><li><strong><code>cfgui</code></strong> 目录是 ConfigUI 的根目录，包含所有配置</li><li><strong><code>module.prop</code></strong> 为模块描述文件</li></ul><h2 id="配置-configui" tabindex="-1">配置 ConfigUI <a class="header-anchor" href="#配置-configui" aria-label="Permalink to “配置 ConfigUI”">​</a></h2><p><code>config.fvv</code> 是 ConfigUI 的配置文件，其中应当包含以下内容:</p><ul><li><code>ConfigPath</code>: 模块的 FVV 配置文件路径，将会以 <code>cfgui</code>的相对路径、模块目录的相对路径、绝对路径 顺序查找</li><li><code>DefaultLang</code> (可选): 多语言的默认回滚语言</li><li><code>IconPath</code> (可选): 图标路径，用于创建快捷方式</li><li><code>InitCommand</code> (可选): ConfigUI 初始化时需要执行的 Shell 代码</li></ul><h3 id="多语言" tabindex="-1">多语言 <a class="header-anchor" href="#多语言" aria-label="Permalink to “多语言”">​</a></h3><p>多语言的配置文件需要存储到 <code>lang</code> 目录内，以<strong>下斜杠</strong>语言标签作为子目录名称，其中的文件会被递归载入至当前语言标签</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>语言标签目录内的 FVV 配置文件会被<strong>无差别</strong>递归读取，子目录路径不会影响其被解析时的行为！</p></div><p>多语言内的文本会被存储到 <code>Lang</code> 内，故调用时需要在值名称前加上 <code>Lang.</code></p><h3 id="界面" tabindex="-1">界面 <a class="header-anchor" href="#界面" aria-label="Permalink to “界面”">​</a></h3><p>界面的配置文件需要存储到 <code>ui</code> 目录内</p><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p>FWW 的文件后缀是 <code>fww</code> 而不是 <code>fvv</code>！</p><p>目录内的 FWW 配置文件会被<strong>无差别</strong>递归读取，子目录路径不会影响其被解析时的行为！</p></div><p>由于解析时会直接赋值多语言文本，故无法直接将 FWW 界面存储至 <code>UI</code> 内，请务必保证每个页面均以 <code>UI.</code> 开头！ 仅有赋值进 <code>UI</code> 内的页面才会被解析为 FWW 界面！</p><p>ConfigUI 的 FWW 界面均使用 <strong>FVV 列表</strong> 作为页面， 其中 <code>UI.Main</code> 是 ConfigUI 的默认页面，编写 ConfigUI 需要确保至少有 <code>UI.Main</code> 一个界面！</p><p>ConfigUI 会将页面的注释设置为该页面的标题:</p><div class="language-fvv"><button title="Copy Code" class="copy"></button><span class="lang">fvv</span><pre class="shiki shiki-themes kanagawa-lotus kanagawa-wave" style="--shiki-light:#545464;--shiki-dark:#DCD7BA;--shiki-light-bg:#F2ECBC;--shiki-dark-bg:#1F1F28;" tabindex="0" dir="ltr"><code><span class="line"><span>UI.PageA = &lt;页面A&gt; [</span></span>
<span class="line"><span>    &lt;...&gt;</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>&lt;直接命名&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>UI.PageB = &lt;Lang.PageB&gt; [</span></span>
<span class="line"><span>    &lt;...&gt;</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>&lt;通过多语言命名&gt;</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>主页面的标题默认是模块名称，在 FWW 中再自定义名称也是允许的</p></div><p>每个页面的除 <code>UI.</code> 外的内容是其路由名称，并且 ConfigUI <strong>不支持</strong>多级定义！请确保所有页面定义均为 <code>UI</code> 的顶级定义！</p>`,23)),a(p),a(d),n[20]||(n[20]=e("hr",{class:"footnotes-sep"},null,-1)),e("section",m,[e("ol",h,[e("li",k,[e("p",null,[a(o,{href:"https://app.niggergo.work/docs/fw/",target:"_blank",rel:"noreferrer"},{default:t(()=>[...n[0]||(n[0]=[s("FVV",-1)])]),_:1}),n[1]||(n[1]=s(" 是一种简单易上手的语言，主要目的是实现一种自由方便的配置文件格式 ",-1)),n[2]||(n[2]=e("a",{href:"#fnref1",class:"footnote-backref"},"↩︎",-1))])]),e("li",C,[e("p",null,[a(o,{href:"https://app.niggergo.work/docs/fw/fww",target:"_blank",rel:"noreferrer"},{default:t(()=>[...n[3]||(n[3]=[s("FWW (FVV Widget)",-1)])]),_:1}),n[4]||(n[4]=s(" 是 FVV 的图形化实现，尽管 FVV 本身并不是一种独立语言，但是 FWW 通过其他语言解析 FWW 的配置文件从而生成界面 ",-1)),n[5]||(n[5]=e("a",{href:"#fnref2",class:"footnote-backref"},"↩︎",-1))])]),e("li",I,[e("p",null,[n[11]||(n[11]=s("CU NGA 风格 是基于 ",-1)),a(o,{href:"https://github.com/chenzyadb",target:"_blank",rel:"noreferrer"},{default:t(()=>[...n[6]||(n[6]=[s("Chenzyadb",-1)])]),_:1}),n[12]||(n[12]=s(" 的 ",-1)),a(o,{href:"https://github.com/chenzyadb/CuprumTurbo-Scheduler",target:"_blank",rel:"noreferrer"},{default:t(()=>[...n[7]||(n[7]=[s("CU 风格",-1)])]),_:1}),n[13]||(n[13]=s(" 的 ",-1)),a(o,{href:"https://m3.material.io/",target:"_blank",rel:"noreferrer"},{default:t(()=>[...n[8]||(n[8]=[s("MD3 风格",-1)])]),_:1}),n[14]||(n[14]=s(" 界面而设计的一种类似于它的界面风格，但是 CU NGA 风格 也可以基于 ",-1)),a(o,{href:"https://github.com/BetterAndroid/FlexiUI",target:"_blank",rel:"noreferrer"},{default:t(()=>[...n[9]||(n[9]=[s("FlexiUI",-1)])]),_:1}),n[15]||(n[15]=s(" 或 ",-1)),a(o,{href:"https://miuix-kotlin-multiplatform.github.io/miuix/zh_CN/",target:"_blank",rel:"noreferrer"},{default:t(()=>[...n[10]||(n[10]=[s("Miuix",-1)])]),_:1}),n[16]||(n[16]=s(" 实现 ",-1)),n[17]||(n[17]=e("a",{href:"#fnref3",class:"footnote-backref"},"↩︎",-1))])])])])])}const w=f(b,[["render",U]]);export{N as __pageData,w as default};
