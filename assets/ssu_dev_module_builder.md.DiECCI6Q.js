import{ax as c,al as t,z as u,A as g,B as n,R as l,aL as b,O as a,J as e}from"./chunks/framework.CiWjUW6V.js";const N=JSON.parse('{"title":"模块构建工具","description":"了解如何使用 ShiroSU 的模块构建工具","frontmatter":{"layout":"doc","icon":"package","title":"模块构建工具","description":"了解如何使用 ShiroSU 的模块构建工具","outline":"deep","footer":true,"breadcrumbs":[{"title":"OOM-WG","link":"/ssu"},{"title":"dev","link":""},{"title":"module","link":"/ssu/dev/module"},{"title":"模块构建工具","link":"/ssu/dev/module/builder"}]},"headers":[],"relativePath":"ssu/dev/module/builder.md","filePath":"ssu/dev/module/builder.md","lastUpdated":1761491518000}'),m={name:"ssu/dev/module/builder.md"},h={class:"tip custom-block github-alert"};function k(f,s,S,v,A,P){const i=t("ArticleMetadata"),o=t("NolebasePageProperties"),p=t("VPNolebaseInlineLinkPreview"),r=t("NolebaseGitContributors"),d=t("NolebaseGitChangelog");return g(),u("div",null,[s[16]||(s[16]=n("h1",{id:"模块构建工具",tabindex:"-1"},[n("strong",null,"模块构建工具"),a(),n("a",{class:"header-anchor",href:"#模块构建工具","aria-label":"Permalink to “模块构建工具”"},"​")],-1)),l(i),l(o),s[17]||(s[17]=n("p",null,"ShiroSU 的模块构建工具分为如下内容:",-1)),n("ul",null,[n("li",null,[l(p,{href:"https://github.com/OOM-WG/ShiroSU-Modules-Builder",target:"_blank",rel:"noreferrer"},{default:e(()=>[...s[0]||(s[0]=[a("构建工具本体",-1)])]),_:1}),s[1]||(s[1]=a(": 在 GitHub Action 中使用或在本地使用",-1))]),n("li",null,[l(p,{href:"https://github.com/OOM-WG/ShiroSU-Module-EG",target:"_blank",rel:"noreferrer"},{default:e(()=>[...s[2]||(s[2]=[a("模块示例模板",-1)])]),_:1}),s[3]||(s[3]=a(": 通过此模板生成模块仓库",-1))])]),s[18]||(s[18]=n("h2",{id:"依赖",tabindex:"-1"},[a("依赖 "),n("a",{class:"header-anchor",href:"#依赖","aria-label":"Permalink to “依赖”"},"​")],-1)),n("div",h,[s[12]||(s[12]=n("p",{class:"custom-block-title"},"TIP",-1)),n("p",null,[s[5]||(s[5]=a("构建工具会使用 ",-1)),l(p,{href:"https://app.niggergo.work",target:"_blank",rel:"noreferrer"},{default:e(()=>[...s[4]||(s[4]=[a("NGA SDK",-1)])]),_:1}),s[6]||(s[6]=a(" 在构建时自动集成 Shell Utils，自动混淆加密",-1)),s[7]||(s[7]=n("code",null,"action.sh",-1)),s[8]||(s[8]=a("、 ",-1)),s[9]||(s[9]=n("code",null,"customize.sh",-1)),s[10]||(s[10]=a("、",-1)),s[11]||(s[11]=n("code",null,"nga-utils.sh",-1))])]),n("ul",null,[n("li",null,[l(p,{href:"https://developer.android.google.cn/ndk",target:"_blank",rel:"noreferrer"},{default:e(()=>[...s[13]||(s[13]=[a("Android NDK",-1)])]),_:1})]),n("li",null,[l(p,{href:"https://golang.google.cn",target:"_blank",rel:"noreferrer"},{default:e(()=>[...s[14]||(s[14]=[a("Go",-1)])]),_:1})]),n("li",null,[l(p,{href:"https://github.com/burrowers/garble",target:"_blank",rel:"noreferrer"},{default:e(()=>[...s[15]||(s[15]=[a("Garble (可选)",-1)])]),_:1})])]),s[19]||(s[19]=b(`<div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>本地构建需要至少有 <code>ksh</code> 或者语法特性更多的 Shell 解释器！否则 Shell 加密无法运行， 不可使用 <code>POSIX</code> Shell！</p></div><h2 id="使用方法-1-github-action" tabindex="-1">使用方法 1 (GitHub Action) <a class="header-anchor" href="#使用方法-1-github-action" aria-label="Permalink to “使用方法 1 (GitHub Action)”">​</a></h2><ol><li>前往示例仓库通过模板生成新项目</li><li>修改模块项目代码</li><li>通过 GitHub Action 手动或自行修改 Workflow 来实现构建模块</li></ol><h2 id="使用方法-2-本地构建" tabindex="-1">使用方法 2 (本地构建) <a class="header-anchor" href="#使用方法-2-本地构建" aria-label="Permalink to “使用方法 2 (本地构建)”">​</a></h2><ol><li>前往示例仓库通过模板生成新项目</li><li>将本项目与模块项目克隆至本地</li><li>修改模块项目代码</li><li>通过 Go 运行本项目的构建工具来实现构建模块</li></ol><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to “项目结构”">​</a></h2><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p>模块项目应该遵循以下目录结构</p></div><div class="language-plaintext"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes kanagawa-lotus kanagawa-wave" style="--shiki-light:#545464;--shiki-dark:#DCD7BA;--shiki-light-bg:#F2ECBC;--shiki-dark-bg:#1F1F28;" tabindex="0" dir="ltr"><code><span class="line"><span>|</span></span>
<span class="line"><span>├── src                     &lt;--- 模块的目录</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   │      *** 模块配置文件 ***</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   ├── module.prop         &lt;--- 此文件用于定义模块相关的一些配置，如模块 ID、版本等</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   │      *** 可选文件 ***</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   ├── customize.sh        &lt;--- 此脚本用于控制安装模块时的行为</span></span>
<span class="line"><span>│   ├── action.sh           &lt;--- 此脚本可在root管理器内通过按钮提供给用户执行</span></span>
<span class="line"><span>│   │                              (ShiroSU默认支持/Magisk 27008+/KernelSU 1.0.2+/APatch 11039+，低版本不支持该按钮，</span></span>
<span class="line"><span>│   │                               开发者应避免不支持而是建议使用者脱离啃老或建议非GKI原版KSU使用者转向其他分支)</span></span>
<span class="line"><span>│   ├── post-fs-data.sh     &lt;--- 此脚本将会在 post-fs-data 模式下运行</span></span>
<span class="line"><span>│   ├── post-mount.sh       &lt;--- 此脚本将会在 post-mount 模式下运行 (仅受ShiroSU/KernelSU/APatch支持)</span></span>
<span class="line"><span>│   ├── service.sh          &lt;--- 此脚本将会在 late_start 服务模式下运行</span></span>
<span class="line"><span>│   ├── boot-completed.sh   &lt;--- 此脚本将会在 Android 系统启动完毕后以服务模式运行 (仅受ShiroSU/KernelSU/APatch支持，Magisk可在“service.sh”内主动执行)</span></span>
<span class="line"><span>|   ├── uninstall.sh        &lt;--- 此脚本将会在模块被卸载时运行</span></span>
<span class="line"><span>│   ├── system.prop         &lt;--- 此文件中指定的属性将会在系统启动时通过 resetprop 更改</span></span>
<span class="line"><span>│   ├── sepolicy.rule       &lt;--- 此文件中的 SELinux 策略将会在系统启动时加载</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   ├── system              &lt;--- 此目录用于通过 systemless 挂载替换系统文件</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   ├── cfgui               &lt;--- 模块的 ConfigUI 目录，参见 https://ssu.oom-wg.dev/dev/cfgui</span></span>
<span class="line"><span>│   ├── webroot             &lt;--- 模块的 WebUI 目录，参见 https://ssu.oom-wg.dev/dev/webui</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   │      *** 构建时文件 (在构建时会自动添加的文件，不应在您的存储库内出现这些文件) ***</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   ├── nga-utils.sh        &lt;--- 此文件将会在构建时自动添加，内含各种常用Shell函数</span></span>
<span class="line"><span>│   ├── hashList.dat        &lt;--- 此文件将会在构建时自动添加，内含模块文件的哈希值，用于安装时校验</span></span>
<span class="line"><span>│   ├── META-INF            &lt;--- 此目录将会在构建时自动添加，内含模块Recovery刷入脚本</span></span>
<span class="line"><span>│   │                              (Magisk模块必须包含这些文件，如果仅支持ShiroSU/KernelSU/APatch则无需包含)</span></span>
<span class="line"><span>│   ├── zygisk              &lt;--- 如果在“c++_native”目录有共享库项目，则会自动添加进此目录，用于Zygisk相关功能 (此目录也可自己添加)</span></span>
<span class="line"><span>│   ├── bin                 &lt;--- 如果在“c++_native”或“go_native”目录有可执行文件项目，则会自动添加进此目录 (此目录也可自己添加)</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   └── ...                 &lt;--- 其他自定义文件</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── c++_native              &lt;--- C++源码的目录 (仅支持以Android.mk配置的项目)</span></span>
<span class="line"><span>│   ├── &lt;项目名称&gt;           &lt;--- 项目名称 (必须和“LOCAL_MODULE”值相同，即生成后的二进制名称)</span></span>
<span class="line"><span>│   │   ├── Android.mk      &lt;--- 构建配置文件 (如果以“BUILD_EXECUTABLE”形式构建，</span></span>
<span class="line"><span>│   │   │                          将自动把编译后二进制文件移动至模块目录的“bin/&lt;项目名称&gt;/&lt;架构&gt;.bin”，</span></span>
<span class="line"><span>│   │   │                          如果以“BUILD_SHARED_LIBRARY”形式构建，将自动把编译后二进制文件移动至模块目录的“zygisk”文件夹里面)</span></span>
<span class="line"><span>│   │   ├── Application.mk  &lt;--- 构建配置文件</span></span>
<span class="line"><span>│   │   └── ...             &lt;--- 其他源码文件</span></span>
<span class="line"><span>│   │</span></span>
<span class="line"><span>│   └── ...                 &lt;--- 其他C++项目</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── go_native               &lt;--- Go源码的目录</span></span>
<span class="line"><span>│   ├── &lt;项目名称&gt;           &lt;--- 项目名称 (必须和“module”值的最后名称相同，即生成后的二进制名称)</span></span>
<span class="line"><span>│   │   ├── arch            &lt;--- 架构配置目录</span></span>
<span class="line"><span>│   │   │   ├── go.mod      &lt;--- 架构项目信息文件</span></span>
<span class="line"><span>│   │   │   ├── go.sum      &lt;--- 有依赖时生成的校验文件</span></span>
<span class="line"><span>│   │   │   └── ...         &lt;--- 其他源码文件 (用于输出需要构建的架构，按行输出，</span></span>
<span class="line"><span>│   │   │                          架构以Go支持的为准(例如使用“amd64”而非“x86_64”))</span></span>
<span class="line"><span>│   │   ├── go.mod          &lt;--- 项目信息文件</span></span>
<span class="line"><span>│   │   ├── go.sum          &lt;--- 有依赖时生成的校验文件</span></span>
<span class="line"><span>│   │   └── ...             &lt;--- 其他源码文件</span></span>
<span class="line"><span>│   └── ...                 &lt;--- 其他Go项目</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── README.md               &lt;--- 仓库说明文件</span></span>
<span class="line"><span>├── changelog.md            &lt;--- 模块更新日志 (可自定义名称/路径)</span></span>
<span class="line"><span>├── update.json             &lt;--- 用于更新模块的 JSON 文件 (可自定义名称/路径)</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>├── .nometa                 &lt;--- (可选) 用于在构建时不添加构建工具自带的“META-INF”目录</span></span>
<span class="line"><span>│</span></span>
<span class="line"><span>└── ...                     &lt;--- 其他用于配置Git仓库的文件或自定义文件</span></span></code></pre></div><p>模块示例仓库已经配置好这些内容，可直接使用模板并按需修改以使用</p><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p>不需要的文件请自行删除！请避免对用户设备造成不必要的负担！</p></div>`,10)),l(r),l(d)])}const U=c(m,[["render",k]]);export{N as __pageData,U as default};
